version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
jobs:
  codestyle:
    docker:
      - image: ubuntu:bionic
    environment:
      LANG: C.UTF-8
    steps:
      - run: apt update
      - run: apt install -y python3-pip
      - checkout
      - run: pip3 install flake8
      - run: flake8 --exclude "" --ignore=E501,F821 geotrek/settings
      - run: flake8 geotrek mapentity
      - run: test $(ls geotrek/*/migrations/*.py | xargs grep -l srid | xargs grep -L SRID | wc -l) -eq 0
  docker_image:
    machine: true
    steps:
      - checkout
      - run: BASE_IMAGE_TAG=focal-3.8 make build
      - run: echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_LOGIN" --password-stdin
      - run: docker tag geotrek:latest geotrekce/circleci-admin:$CIRCLE_WORKFLOW_ID
      - run: docker push geotrekce/circleci-admin:$CIRCLE_WORKFLOW_ID
  docker_image_18_04:
    machine: true
    steps:
      - checkout
      - run: BASE_IMAGE_TAG=bionic-3.6 make build
      - run: echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_LOGIN" --password-stdin
      - run: docker tag geotrek:latest geotrekce/circleci-admin:18.04-$CIRCLE_WORKFLOW_ID
      - run: docker push geotrekce/circleci-admin:18.04-$CIRCLE_WORKFLOW_ID
  docker_test:
    machine: true
    environment:
      LANG: C.UTF-8
    steps:
      - checkout
      - run: echo "import multiprocessing; print(multiprocessing.cpu_count())" | python
      - run: cp .env-prod.dist .env; cp docker-compose-prod.yml docker-compose.yml
      - run: docker run -p 5432:5432 --env-file .env -d postgis/postgis:11-2.5
      - run: docker pull geotrekce/circleci-admin:$CIRCLE_WORKFLOW_ID
      - run: docker tag geotrekce/circleci-admin:$CIRCLE_WORKFLOW_ID geotrekce/admin:latest
      - run: docker-compose run web update.sh
      - run: docker-compose run -e ENV=tests web coverage run ./manage.py test -v 2 --parallel 4
      - run: docker-compose run web coverage xml -o var/coverage.xml
      - codecov/upload:
          file: var/coverage.xml
          flags: test
          when: on_success
  docker_test_18_04:
    machine: true
    environment:
      LANG: C.UTF-8
    steps:
      - checkout
      - run: cp .env-prod.dist .env; cp docker-compose-prod.yml docker-compose.yml
      - run: docker run -p 5432:5432 --env-file .env -d postgis/postgis:11-2.5
      - run: docker pull geotrekce/circleci-admin:18.04-$CIRCLE_WORKFLOW_ID
      - run: docker tag geotrekce/circleci-admin:18.04-$CIRCLE_WORKFLOW_ID geotrekce/admin:latest
      - run: docker-compose run web update.sh
      - run: docker-compose run -e ENV=tests web coverage run ./manage.py test -v 2 --parallel 4
  docker_test_nds:
    machine: true
    environment:
      LANG: C.UTF-8
    steps:
      - checkout
      - run: cp .env-prod.dist .env; cp docker-compose-prod.yml docker-compose.yml
      - run: docker run -p 5432:5432 --env-file .env -d postgis/postgis:11-2.5
      - run: docker pull geotrekce/circleci-admin:$CIRCLE_WORKFLOW_ID
      - run: docker tag geotrekce/circleci-admin:$CIRCLE_WORKFLOW_ID geotrekce/admin:latest
      - run: docker-compose run web update.sh
      - run: docker-compose run -e ENV=tests_nds web coverage run ./manage.py test -v 2 --parallel 4
      - run: docker-compose run web coverage xml -o var/coverage.xml
      - codecov/upload:
          file: var/coverage.xml
          flags: test_nds
          when: on_success
  docker_test_nds_18_04:
    machine: true
    environment:
      LANG: C.UTF-8
    steps:
      - checkout
      - run: cp .env-prod.dist .env; cp docker-compose-prod.yml docker-compose.yml
      - run: docker run -p 5432:5432 --env-file .env -d postgis/postgis:11-2.5
      - run: docker pull geotrekce/circleci-admin:18.04-$CIRCLE_WORKFLOW_ID
      - run: docker tag geotrekce/circleci-admin:18.04-$CIRCLE_WORKFLOW_ID geotrekce/admin:latest
      - run: docker-compose run web update.sh
      - run: docker-compose run -e ENV=tests_nds web coverage run ./manage.py test -v 2 --parallel 4
  docker_test_js:
    docker:
      - image: geotrekce/circleci-admin:$CIRCLE_WORKFLOW_ID
    environment:
      LANG: C.UTF-8
      ENV: tests
      SECRET_KEY: foo
      CUSTOM_SETTINGS_FILE: ""
      CONVERSION_HOST: localhost
      CAPTURE_HOST: localhost
    working_directory: /opt/geotrek-admin
    steps:
      - run: apt-get update -q && apt-get install -q -y npm
      - run: mkdir -p var/conf/extra_static
      - run: ./env/bin/python manage.py collectstatic --noinput
      - run: npm install geotrek/jstests
      - run: ./node_modules/.bin/mocha-phantomjs geotrek/jstests/index.html
  docker_test_integration:
    machine: true
    environment:
      LANG: C.UTF-8
    steps:
      - checkout
      - run: cp .env-prod.dist .env; cp docker-compose-prod.yml docker-compose.yml
      - run: echo 'LANGUAGES=en fr' >> .env
      - run: echo 'LANGUAGE_CODE=en' >> .env
      - run: docker run -p 5432:5432 --env-file .env -d postgis/postgis:11-2.5
      - run: docker pull geotrekce/circleci-admin:$CIRCLE_WORKFLOW_ID
      - run: docker tag geotrekce/circleci-admin:$CIRCLE_WORKFLOW_ID geotrekce/admin:latest
      - run: docker-compose run web update.sh
      - run: sudo apt-get update -q && sudo apt-get install -q -y npm nginx
      - run: mkdir -p var/conf/extra_static
      - run: make load_data
      - run: make load_test_integration
      - run: docker-compose up -d
      - run: sudo mkdir /var/www/geotrek -p
      - run: sudo ln -s /home/circleci/project/var/media /var/www/geotrek
      - run: sudo ln -s /home/circleci/project/var/static /var/www/geotrek
      - run: sudo ln -s /home/circleci/project/cypress/nginx.conf /etc/nginx/sites-enabled/geotrek.conf
      - run: sudo ls -l /home/circleci/project
      - run: sudo ls -l /var/www/geotrek
      - run: sudo rm /etc/nginx/sites-enabled/default
      - run: sudo nginx -s reload
      - run: npm install cypress
      - run: ./node_modules/.bin/cypress run
  docker_publish:
    machine: true
    environment:
      LANG: C.UTF-8
    steps:
      - checkout
      - run: docker pull geotrekce/circleci-admin:$CIRCLE_WORKFLOW_ID
      - run: docker tag geotrekce/circleci-admin:$CIRCLE_WORKFLOW_ID geotrekce/admin:$(cat VERSION)
      - run: docker tag geotrekce/circleci-admin:$CIRCLE_WORKFLOW_ID geotrekce/admin:latest
      - run: echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_LOGIN" --password-stdin
      - run: docker push geotrekce/admin:$(cat VERSION)
      - run: docker push geotrekce/admin:latest
  ubuntu_package:
    docker:
      - image: ubuntu:focal
    environment:
      LANG: C.UTF-8
    steps:
      - checkout
      - run: grep '^[0-9]\+\.[0-9]\+\.[0-9]\+$' VERSION || sed -i 's/~dev0/.ubuntu20.04~dev<< pipeline.number >>/' debian/changelog
      - run: sed -i 's/geotrek-admin (\([0-9]\+\.[0-9]\+\.[0-9]\+\)\(.*\)) RELEASED;/geotrek-admin (\1.ubuntu20.04\2) bionic;/' debian/changelog
      - run: apt-get update -q
      - run: DEBIAN_FRONTEND=noninteractive apt-get install -q -y software-properties-common
      - run: add-apt-repository ppa:jyrki-pulliainen/dh-virtualenv
      - run: apt-get install -q -y dpkg-dev debhelper dh-virtualenv git python3 python3-venv python3-dev libgdal-dev libffi-dev libxml2-dev libxslt1-dev
      - run: dpkg-buildpackage -uc -us -b
      - persist_to_workspace:
          root: /root
          paths: geotrek-admin_*_amd64.deb
  ubuntu_package_18_04:
    docker:
      - image: ubuntu:bionic
    environment:
      LANG: C.UTF-8
    steps:
      - checkout
      - run: grep '^[0-9]\+\.[0-9]\+\.[0-9]\+$' VERSION || sed -i 's/~dev0/.ubuntu18.04~dev<< pipeline.number >>/' debian/changelog
      - run: sed -i 's/geotrek-admin (\([0-9]\+\.[0-9]\+\.[0-9]\+\)\(.*\)) RELEASED;/geotrek-admin (\1.ubuntu18.04\2) focal;/' debian/changelog
      - run: apt-get update -q && apt-get install -q -y dpkg-dev debhelper dh-virtualenv git python3 python3-venv python3-dev libgdal-dev libffi-dev libxml2-dev libxslt1-dev
      - run: dpkg-buildpackage -uc -us -b
      - persist_to_workspace:
          root: /root
          paths: geotrek-admin_*_amd64.deb
  ubuntu_publish:
    docker:
      - image: ubuntu:bionic
    environment:
      LANG: C.UTF-8
    steps:
      - checkout
      - run: apt-get update -q && apt-get install -q -y ca-certificates openssh-client
      - attach_workspace:
          at: /tmp/workspace
      - run:
          command: |
            grep '^[0-9]\+\.[0-9]\+\.[0-9]\+$' VERSION && export DEB_COMPONENT=main || export DEB_COMPONENT=dev
            scp -P $SSH_PORT -o StrictHostKeyChecking=no /tmp/workspace/geotrek-admin_*_amd64.deb $SSH_USER@$SSH_HOST:/srv/packages/incoming/$DEB_COMPONENT/
      - run: ssh -p $SSH_PORT -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST make -C /srv/packages
workflows:
  version: 2
  all:
    jobs:
      - codestyle:
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
      - docker_image:
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
      - docker_image_18_04:
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
      - docker_test:
          requires:
            - docker_image
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
      - docker_test_18_04:
          requires:
            - docker_image_18_04
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
      - docker_test_nds:
          requires:
            - docker_image
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
      - docker_test_nds_18_04:
          requires:
            - docker_image_18_04
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
      - docker_test_js:
          requires:
            - docker_image
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
      - docker_test_integration:
          requires:
            - docker_image
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
      - docker_publish:
          requires:
            - codestyle
            - docker_test
            - docker_test_nds
            - docker_test_js
            - docker_test_integration
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
      - ubuntu_package:
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
      - ubuntu_package_18_04:
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
      - ubuntu_publish:
          requires:
            - codestyle
            - ubuntu_package
            - ubuntu_package_18_04
            - docker_test
            - docker_test_18_04
            - docker_test_nds
            - docker_test_nds_18_04
            - docker_test_js
            - docker_test_integration
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
